import flixel.tweens.FlxEase;
import funkin.graphics.FunkinSprite;
import flixel.tweens.FlxTween;
import funkin.play.cutscene.dialogue.DialogueBox;
import funkin.play.PlayState;
import funkin.play.PlayStatePlaylist;
import funkin.play.song.Song;
import flixel.FlxG;
import funkin.save.Save;
import flixel.FlxSprite;
import flixel.util.FlxTimer;
import funkin.effects.RetroCameraFade;
import funkin.play.cutscene.VideoCutscene;
import funkin.play.cutscene.CutsceneType;
import funkin.Preferences;

class RuvuySong extends Song
{
  var hasPlayedIntroCutscene:Bool;
  var hasPlayedEndCutscene:Bool;

  public function new()
  {
    super('ruvuy');
  }

  public override function onCountdownStart(event:CountdownScriptEvent):Void
  {
    super.onCountdownStart(event);

    // Skip the cutscene unless we are in Story Mode
    if (!PlayStatePlaylist.isStoryMode) hasPlayedIntroCutscene = true;

    // Skip the cutscene if we're playtesting in the Chart Editor.
    if (PlayState.instance.isChartingMode && !hasPlayedIntroCutscene) hasPlayedIntroCutscene = true;

    if (!hasPlayedIntroCutscene)
    {
      trace('Pausing countdown to play cutscene.');

      hasPlayedIntroCutscene = true;

      event.cancel(); // CANCEL THE COUNTDOWN!

      //  pausing is breaking a lot in the erect stage for some reason disabling this for the sake of not running into issues atm
      //  PlayState.instance.currentStage.pause();

      transitionToDialogue();
      // startVideo();
    }
  }

  function transitionToDialogue()
  {
    trace('Transitioning to dialogue.');

    PlayState.instance.disableKeys = true;

    PlayState.instance.camCutscene.visible = true;

    var black:FlxSprite = new FunkinSprite(-20, -20).makeSolidColor(FlxG.width * 1.5, FlxG.height * 1.5, 0xFF000000);
    black.cameras = [PlayState.instance.camCutscene];
    black.zIndex = 1000000;
    PlayState.instance.add(black);

    black.alpha = 1.0;

    new FlxTimer().start(0.25, _ -> {
      FlxTween.tween(black, {alpha: 0}, 1.0, {
        onComplete: _ -> {
          PlayState.instance.remove(black);
        }
      });
    });

    new FlxTimer().start(1.0 + .25, _ -> {
      startDialogue();
    });
  }

  function startDialogue()
  {
    PlayState.instance.disableKeys = false;
    PlayState.instance.startConversation('ruvuy');
  }

  /**
   * Don't replay the cutscene between restarts.
   */
  function onSongRetry(event:ScriptEvent)
  {
    super.onSongRetry(event);

    hasPlayedIntroCutscene = true;
  }

  public override function onSongEnd(event:CountdownScriptEvent):Void
  {
    super.onSongEnd(event);

    if (!PlayStatePlaylist.isStoryMode) hasPlayedEndCutscene = true;

    if (!hasPlayedEndCutscene)
    {
      PlayState.instance.isInCutscene = true;
      PlayState.instance.mayPauseGame = false;
      hasPlayedEndCutscene = true;

      event.cancel();

      // start the video cutscene and hide it so the other stuff can happen after
      startVideo();
    }
    else
    {
      // Make sure the cutscene can play again next time!
      hasPlayedEndCutscene = false;
      PlayState.instance.isInCutscene = false;
      PlayState.instance.mayPauseGame = true;
      // DO NOT CANCEL THE EVENT!
    }
  }

  function startVideo()
  {
    var videoPath = 'Ruvuy_EndCutscene_V1';

    if (Preferences.naughtyness)
    {
      videoPath += '-naughty';
    } else {
      videoPath += '-nice';
    }

    trace(Paths.videos(videoPath));

    VideoCutscene.play(Paths.videos(videoPath, ''), CutsceneType.ENDING);
  }

  /**
   * Replay the cutscene after leaving the song.
   */
  function onCreate(event:ScriptEvent):Void
  {
    super.onCreate(event);

    hasPlayedIntroCutscene = false;
    hasPlayedEndCutscene = false;
  }

  public override function onDialogueEnd()
  {
    // We may need to wait for the outro to play.
    PlayState.instance.currentStage.resume();
    Countdown.performCountdown();
  }

  public function onStepHit(event:SongTimeScriptEvent)
  {
    var currentStage = PlayState.instance.currentStage;

    if (currentStage == null) return;
    
    if (event.step >= 64 && event.step < 160)
    {
      if (currentStage.getNamedProp('Huvi').idleSuffix == '') {
        currentStage.getNamedProp('Huvi').idleSuffix = '-embarassed';
        currentStage.getNamedProp('Futry').idleSuffix = '-sad';
      }
    }
    else
    { 
      if (currentStage.getNamedProp('Huvi').idleSuffix != '') {
        currentStage.getNamedProp('Huvi').idleSuffix = '';
        currentStage.getNamedProp('Futry').idleSuffix = '';
      }
    }
  }
}
