import flixel.tweens.FlxEase;
import funkin.graphics.FunkinSprite;
import flixel.tweens.FlxTween;
import funkin.play.cutscene.dialogue.DialogueBox;
import funkin.play.PlayState;
import funkin.play.PlayStatePlaylist;
import funkin.play.song.Song;
import flixel.FlxG;
import funkin.save.Save;
import flixel.FlxSprite;
import flixel.util.FlxTimer;
import funkin.effects.RetroCameraFade;

class RirykSong extends Song
{
  var hasPlayedCutscene:Bool;

  public function new()
  {
    super('riryk');
  }

  public override function onCountdownStart(event:CountdownScriptEvent):Void
  {
    super.onCountdownStart(event);

    // Skip the cutscene unless we are in Story Mode
    if (!PlayStatePlaylist.isStoryMode) hasPlayedCutscene = true;

    // Skip the cutscene if we're playtesting in the Chart Editor.
    if (PlayState.instance.isChartingMode && !hasPlayedCutscene) hasPlayedCutscene = true;

    if (!hasPlayedCutscene)
    {
      trace('Pausing countdown to play cutscene.');

      hasPlayedCutscene = true;

      event.cancel(); // CANCEL THE COUNTDOWN!

      //  pausing is breaking a lot in the erect stage for some reason disabling this for the sake of not running into issues atm
      //  PlayState.instance.currentStage.pause();

      transitionToDialogue();
    }
  }

  function transitionToDialogue()
  {
    trace('Transitioning to dialogue.');

    PlayState.instance.disableKeys = true;

    PlayState.instance.camCutscene.visible = true;

    var black:FlxSprite = new FunkinSprite(-20, -20).makeSolidColor(FlxG.width * 1.5, FlxG.height * 1.5, 0xFF000000);
    black.cameras = [PlayState.instance.camCutscene];
    black.zIndex = 1000000;
    PlayState.instance.add(black);

    black.alpha = 1.0;

    new FlxTimer().start(0.25, _ -> {
      FlxTween.tween(black, {alpha: 0}, 1.0, {
        onComplete: _ -> {
          PlayState.instance.remove(black);
        }
      });
    });

    new FlxTimer().start(1.0 + .25, _ -> {
      startDialogue();
    });
  }

  function startDialogue()
  {
    PlayState.instance.disableKeys = false;
    PlayState.instance.startConversation('riryk');
  }

  /**
   * Don't replay the cutscene between restarts.
   */
  function onSongRetry(event:ScriptEvent)
  {
    super.onSongRetry(event);

    hasPlayedCutscene = true;
  }

  /**
   * Replay the cutscene after leaving the song.
   */
  function onCreate(event:ScriptEvent):Void
  {
    super.onCreate(event);

    hasPlayedCutscene = false;
  }

  public override function onDialogueEnd()
  {
    // We may need to wait for the outro to play.
    PlayState.instance.currentStage.resume();
    Countdown.performCountdown();
  }
}
